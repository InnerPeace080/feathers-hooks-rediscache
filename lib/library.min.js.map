{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src/routes/helpers/redis.js","webpack://library/external \"qs\"","webpack://library/./src/hooks/helpers/path.js","webpack://library/external \"chalk\"","webpack://library/external \"moment\"","webpack://library/./src/hooks/redis.js","webpack://library/./src/hooks/cache.js","webpack://library/external \"redis\"","webpack://library/./src/redisClient.js","webpack://library/external \"express\"","webpack://library/./src/routes/cache.js","webpack://library/./src/index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","RedisCache","client","_classCallCheck","this","key","_this","Promise","resolve","reject","del","err","reply","_this2","lrange","clearAll","then","e","array","_this3","length","clearSingle","require","_qs","parsePath","hook","config","arguments","undefined","removePathFromCacheKey","parseNestedRoutes","q","params","query","remove","path","id","re","RegExp","match","exec","keys","route","includes","replace","parseNestedPath","qs","stringify","encode","before","options","assign","defaults","app","cacheOptions","env","_path","data","JSON","parse","duration","_moment2","default","cache","expiresOn","format","result","console","log","chalk","cyan","green","after","cached","cachingDefault","defaultDuration","add","moment","parent","group","set","expire","rpush","humanize","wrapped","clearGroup","target","h","message","Array","isArray","removeCacheInformation","redis","createClient","_redis","HTTP_OK","HTTP_NO_CONTENT","HTTP_SERVER_ERROR","router","express","Router","req","res","flushall","status","json","hasQueryString","url","split","_cache3","redisClient","cacheRoutes","hookCache","hookRemoveCacheInformation","redisBeforeHook","redisAfterHook","redisClearGroupHook"],"mappings":"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","file":"library.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","export default class RedisCache {\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * scan the redis index\n   */\n  // scan() {\n  //   // starts at 0 if cursor is again 0 it means the iteration is finished\n  //   let cursor = '0';\n\n  //   return new Promise((resolve, reject) => {\n  //     this.client.scan(cursor, 'MATCH', '*', 'COUNT', '100', (err, reply) => {\n  //       if (err) {\n  //         reject(err);\n  //       }\n\n  //       cursor = reply[0];\n  //       if (cursor === '0') {\n  //         resolve(reply[1]);\n  //       } else {\n  //         // do your processing\n  //         // reply[1] is an array of matched keys.\n  //         // console.log(reply[1]);\n  //         return this.scan();\n  //       }\n  //       return false;\n  //     });\n\n  //   });\n  // }\n\n  /**\n   * Async scan of the redis index\n   * Do not for get to passin a Set\n   * myResults = new Set();\n   *\n   * scanAsync('0', \"NOC-*[^listen]*\", myResults).map(\n   *   myResults => { console.log( myResults); }\n   * );\n   *\n   * @param {String} cursor - string '0'\n   * @param {String} patern - string '0'\n   * @param {Set} returnSet - pass a set to have unique keys\n   */\n  // scanAsync(cursor, pattern, returnSet) {\n  //   // starts at 0 if cursor is again 0 it means the iteration is finished\n\n  //   return new Promise((resolve, reject) => {\n  //     this.client.scan(cursor, 'MATCH', pattern, 'COUNT', '100', (err, reply) => {\n\n  //       if (err) {\n  //         reject(err);\n  //       }\n\n  //       cursor = reply[0];\n  //       const keys = reply[1];\n\n  //       keys.forEach((key, i) => {\n  //         returnSet.add(key);\n  //       });\n\n  //       if (cursor === '0') {\n  //         resolve(Array.from(returnSet));\n  //       }\n\n  //       return this.scanAsync(cursor, pattern, returnSet);\n  //     });\n  //   });\n  // }\n\n  /**\n   * Clean single item from the cache\n   * @param {string} key - the key to find in redis\n   */\n  clearSingle(key) {\n    return new Promise((resolve, reject) => {\n      this.client.del(`${key}`, (err, reply) => {\n        if (err) reject(false);\n        if (reply === 1) {\n          resolve(true);\n        }\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Clear a group\n   * @param {string} key - key of the group to clean\n   */\n  clearGroup(key) {\n    return new Promise((resolve, reject) => {\n      this.client.lrange(key, 0, -1, (err, reply) => {\n        if (err) {\n          reject(err);\n        }\n        this.clearAll(reply).then(\n          this.client.del(key, (e, r) => {\n            resolve(r === 1);\n          })\n        );\n      });\n    });\n  }\n\n  /**\n   * Clear all keys of a redis list\n   * @param {Object[]} array\n   */\n  clearAll(array) {\n    return new Promise(resolve => {\n      if (!array.length) resolve(false);\n      let i = 0;\n\n      for (i; i < array.length; i++) {\n        this.clearSingle(array[i]).then(r => {\n          if (i === array.length - 1) {\n            resolve(r);\n          }\n        });\n      }\n    });\n  }\n};\n","module.exports = require(\"qs\");","import qs from 'qs';\n\nfunction parseNestedPath(path, params) {\n  const re = new RegExp(':([^\\\\/\\\\?]+)\\\\??', 'g');\n  let match = null;\n\n  while ((match = re.exec(path)) !== null) {\n    if (Object.keys(params.route).includes(match[1])) {\n      path = path.replace(match[0], params.route[match[1]]);\n    }\n  }\n\n  return path;\n}\n\nfunction parsePath(hook, config = {removePathFromCacheKey: false, parseNestedRoutes: false}) {\n  const q = hook.params.query || {};\n  const remove = config.removePathFromCacheKey;\n  const parseNestedRoutes = config.parseNestedRoutes;\n  let path = remove && hook.id ? '' : `${hook.path}`;\n\n  if (!remove && parseNestedRoutes) {\n    path = parseNestedPath(path, hook.params);\n  }\n\n  if (hook.id) {\n    if (path.length !== 0 && !remove) {\n      path += '/';\n    }\n    if (Object.keys(q).length > 0) {\n      path += `${hook.id}?${qs.stringify(q, { encode: false })}`;\n    } else {\n      path += `${hook.id}`;\n    }\n  } else {\n    if (Object.keys(q).length > 0) {\n      path += `?${qs.stringify(q, { encode: false })}`;\n    }\n  }\n\n  return path;\n}\n\nexport { parsePath };\n","module.exports = require(\"chalk\");","module.exports = require(\"moment\");","import moment from 'moment';\nimport chalk from 'chalk';\nimport { parsePath } from './helpers/path';\nimport RedisCache from '../routes/helpers/redis';\n\nconst defaults = {};\n\nexport function before(options) { // eslint-disable-line no-unused-vars\n  options = Object.assign({}, defaults, options);\n\n  return function (hook) {\n    return new Promise(resolve => {\n      const client = hook.app.get('redisClient');\n      const cacheOptions = hook.app.get('redisCache');\n      const env = cacheOptions.env || 'production';\n      const path = parsePath(hook, cacheOptions);\n\n      client.get(path, (err, reply) => {\n        if (err !== null) resolve(hook);\n        if (reply) {\n          let data = JSON.parse(reply);\n          const duration = moment(data.cache.expiresOn).format('DD MMMM YYYY - HH:mm:ss');\n\n          hook.result = data;\n          resolve(hook);\n\n          /* istanbul ignore next */\n          if (env !== 'test') {\n            console.log(`${chalk.cyan('[redis]')} returning cached value for ${chalk.green(path)}.`);\n            console.log(`> Expires on ${duration}.`);\n          }\n        } else {\n          resolve(hook);\n        }\n      });\n    });\n  };\n};\n\nexport function after(options) { // eslint-disable-line no-unused-vars\n  options = Object.assign({}, defaults, options);\n\n  return function (hook) {\n    return new Promise(resolve => {\n      if ((!hook.result) || (!hook.result.cache) || (!hook.result.cache.cached)) {\n        const cacheOptions = hook.app.get('redisCache');\n        const env = cacheOptions.env || 'production';\n        const cachingDefault = cacheOptions.defaultDuration ? cacheOptions.defaultDuration : 3600 * 24;\n        const duration = (hook.result && hook.result.cache && hook.result.cache.duration) ?\n          hook.result.cache.duration : cachingDefault;\n        const client = hook.app.get('redisClient');\n        const path = parsePath(hook, cacheOptions);\n\n        // adding a cache object\n        Object.assign(hook.result.cache, {\n          cached: true,\n          duration: duration,\n          expiresOn: moment().add(moment.duration(duration, 'seconds')),\n          parent: hook.path,\n          group: hook.path ? `group-${hook.path}` : '',\n          key: path\n        });\n\n        client.set(path, JSON.stringify(hook.result));\n        client.expire(path, hook.result.cache.duration);\n        if (hook.path) {\n          client.rpush(hook.result.cache.group, path);\n        }\n\n        /* istanbul ignore next */\n        if (env !== 'test') {\n          console.log(`${chalk.cyan('[redis]')} added ${chalk.green(path)} to the cache.`);\n          console.log(`> Expires in ${moment.duration(duration, 'seconds').humanize()}.`);\n        }\n      }\n\n      if (hook.result.cache.hasOwnProperty('wrapped')) {\n        const { wrapped } = hook.result.cache;\n\n        hook.result = wrapped;\n      }\n\n      resolve(hook);\n    });\n  };\n};\n\nexport function clearGroup(target) { // eslint-disable-line no-unused-vars\n  return function (hook) {\n    if (target) {\n      const client = hook.app.get('redisClient');\n      const h = new RedisCache(client);\n\n      target = 'group-' + target;\n      // Returns elements of the list associated to the target/key 0 being the\n      // first and -1 specifying get all till the latest\n      client.lrange(target, 0, -1, (err, reply) => {\n        if (err) {\n          console.log({\n            message: 'something went wrong' + err.message\n          });\n        } else {\n          // If the list/group existed and contains something\n          if (reply && Array.isArray(reply) && (reply.length > 0)) {\n            // Clear existing cached group key\n            h.clearGroup(target).then(r => {\n              console.log({\n                message:\n                  `cache cleared for the group key: ${target}`\n              });\n            });\n          } else {\n            /**\n             * Empty reply means the key does not exist.\n             * Must use HTTP_OK with express as HTTP's RFC stats 204 should not\n             * provide a body, message would then be lost.\n             */\n            console.log({\n              message:\n               `cache already cleared for the group key: ${target}`\n            });\n          }\n        }\n      });\n    }\n  };\n};\n","/**\n * After hook - generates a cache object that is needed\n * for the redis hook and the express middelware.\n * @todo add default value in config file\n */\nconst defaults = {};\n\nexport function cache(options) { // eslint-disable-line no-unused-vars\n  options = Object.assign({}, defaults, options);\n\n  return function (hook) {\n    if (!hook.result.hasOwnProperty('cache')) {\n      let cache = {};\n\n      if (Array.isArray(hook.result)) {\n        const array = hook.result;\n\n        cache.wrapped = array;\n        hook.result = {};\n      }\n\n      cache = Object.assign({}, cache, {\n        cached: false,\n        duration: options.duration || 3600 * 24\n      });\n\n      hook.result.cache = cache;\n    }\n    return Promise.resolve(hook);\n  };\n};\n\nexport function removeCacheInformation(options) { // eslint-disable-line no-unused-vars\n  options = Object.assign({}, defaults, options);\n\n  return function (hook) {\n    if (hook.result.hasOwnProperty('cache')) {\n      delete hook.result.cache;\n    }\n    return Promise.resolve(hook);\n  };\n};\n","module.exports = require(\"redis\");","import redis from 'redis';\n\nexport default function redisClient() { // eslint-disable-line no-unused-vars\n  this.set('redisClient', redis.createClient(this.get('redis')));\n  return this;\n}\n","module.exports = require(\"express\");","import express from 'express';\n\nimport RedisCache from './helpers/redis';\n\nconst HTTP_OK = 200;\nconst HTTP_NO_CONTENT = 204;\nconst HTTP_SERVER_ERROR = 500;\n\nfunction routes(app) {\n  const router = express.Router();\n  const client = app.get('redisClient');\n  const h = new RedisCache(client);\n\n  router.get('/clear', (req, res) => {\n    client.flushall();\n    res.status(HTTP_OK).json({\n      message: 'Cache cleared',\n      status: HTTP_OK\n    });\n  });\n\n  // clear a unique route\n  router.get('/clear/single/:target', (req, res) => {\n    let target = req.params.target;\n    // Formated options following ?\n    const query = req.query;\n    const hasQueryString = (query && (Object.keys(query).length !== 0));\n\n    // Target should always be defined as Express router raises 404\n    // as route is not handled\n    if (target) {\n      if (hasQueryString) {\n      // Keep queries in a single string with the taget\n        target = req.url.split('/')[3];\n      }\n\n      // Gets the value of a key in the redis client\n      client.get(`${target}`, (err, reply) => {\n        if (err) {\n          res.status(HTTP_SERVER_ERROR).json({\n            message: 'something went wrong' + err.message\n          });\n        } else {\n          // If the key existed\n          if (reply) {\n            // Clear existing cached key\n            h.clearSingle(target).then(r => {\n              res.status(HTTP_OK).json({\n                message: `cache cleared for key (${hasQueryString ?\n                  'with' : 'without'} params): ${target}`,\n                status: HTTP_OK\n              });\n            });\n          } else {\n            /**\n             * Empty reply means the key does not exist.\n             * Must use HTTP_OK with express as HTTP's RFC stats 204 should not\n             * provide a body, message would then be lost.\n             */\n            res.status(HTTP_OK).json({\n              message: `cache already cleared for key (${hasQueryString ?\n                'with' : 'without'} params): ${target}`,\n              status: HTTP_NO_CONTENT\n            });\n          }\n\n        }\n      });\n    }\n  });\n\n  // clear a group\n  router.get('/clear/group/:target', (req, res) => {\n    let target = req.params.target;\n\n    // Target should always be defined as Express router raises 404\n    // as route is not handled\n    if (target) {\n      target = 'group-' + target;\n      // Returns elements of the list associated to the target/key 0 being the\n      // first and -1 specifying get all till the latest\n      client.lrange(target, 0, -1, (err, reply) => {\n        if (err) {\n          res.status(HTTP_SERVER_ERROR).json({\n            message: 'something went wrong' + err.message\n          });\n        } else {\n          // If the list/group existed and contains something\n          if (reply && Array.isArray(reply) && (reply.length > 0)) {\n            // Clear existing cached group key\n            h.clearGroup(target).then(r => {\n              res.status(HTTP_OK).json({\n                message:\n                  `cache cleared for the group key: ${req.params.target}`,\n                status: HTTP_OK\n              });\n            });\n          } else {\n            /**\n             * Empty reply means the key does not exist.\n             * Must use HTTP_OK with express as HTTP's RFC stats 204 should not\n             * provide a body, message would then be lost.\n             */\n            res.status(HTTP_OK).json({\n              message:\n                `cache already cleared for the group key: ${target}`,\n              status: HTTP_NO_CONTENT\n            });\n          }\n        }\n      });\n    }\n  });\n\n  // add route to display cache index\n  // this has been removed for performance issues\n  // router.get('/index', (req, res) => {\n  //   let results = new Set();\n\n  //   h.scanAsync('0', '*', results)\n  //     .then(data => {\n  //       res.status(200).json(data);\n  //     })\n  //     .catch(err => {\n  //       res.status(404).json(err);\n  //     });\n\n  // });\n\n  return router;\n}\n\nexport default routes;\n","import cacheRoutes from './routes/cache';\nimport redisClient from './redisClient';\nimport { cache as hookCache } from './hooks/cache';\nimport { removeCacheInformation as hookRemoveCacheInformation } from './hooks/cache';\nimport { before as redisBeforeHook} from './hooks/redis';\nimport { after as redisAfterHook} from './hooks/redis';\nimport { clearGroup as redisClearGroupHook} from './hooks/redis';\n\nexport default {\n  redisClient,\n  cacheRoutes,\n  hookCache,\n  hookRemoveCacheInformation,\n  redisBeforeHook,\n  redisAfterHook,\n  redisClearGroupHook\n};\n"],"sourceRoot":""}